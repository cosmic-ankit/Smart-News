*************************** Lecture 23  **********************

* Render - >We render the files in app.js in class based componet. Render is a lifecycle method, jab react kisi component ko load karti hai to series of method load hote hai and that is lifecycle method

* In class based compmnents of react the syntax changes like we use peops and state in a different manner here

*  Now what we wanna do over here is that we will craete a news app named "Smart NEWS". It will hava a nav bar then we will make a news container component below it and inside it there will be news items having different news and then when we will click on those news items, a news detail page will open which will have that news.

*  We will use news api over here

* Rce is a snippet for class based component and rcep is class based component with props set up.


********************** Lecture 24 *************************

* So in this lecture i have created an api from news api and made a json filr where i have extracted the top headline ka  data.

* We have given the body to the news item using the bootstrap component of card.

* In class bassed component to use props we use this.props.propname.

* this.props is an object

*   let {title, discreption} = this.props;
But here we are using the destructuring the titlle will get the first value of this.props that is also title and discreption will get the second value of this.props which is the discreption itself. so we can use title and discreption in the whole compmnent directly

* We are passing title and discreption as a props in news items through NewsContainer

* To make row in bootstrap we use row class
* To make column in bootstrap we use column class

* In bootstrap there can be a 12 column in a row, so md -4 is a class which makes the width of the column.
Md-4 means this column will take the size of 4 columns


**************** Lecture 25 ******************************

Understanding state in class based component :-

* To use state we declare a constructor in which we call super() method. Then we make an object of state using

this.state = { 
    count:0,
    hello: "Hello
}

* then we can directly use their value in the constructor by using  this.state.count

* To update the value of state we use this.setstate() method. 
 this.setState({ count: this.state.count + 1 });

*******************************************

* btn-sm is the bootstrap class used to make a button smaller


************************ Lecture 26 ****************************

* So here we have created a map function to iterate over the every elenent in an array and then  we are passing the props through it.

* We have limited the length of decription and title sp that there will be uniformity in each card



************************* Lectures 27 ********************************

************ App.css 

We have added css so that each card will get the equal size.
********* NewsContainer.js 

We have erased the data of json file.
We are fetching data directly from news using fetch api.
We have set the article to empty array
Then we have used ComponnetDidMount promise function to fetch the api, converted it into json and set it to the articles.
Then we have given that if title or description will be empty set it to ""

*********************** NewsItem.js

We have erased the news items description from news items
And if image will be empty set it to breaking bad image.










************************** Lecture 28 *****************************

*************** Setting Up the light and dark mode 

So we have done some work in setting up the light and dark mode first.
We will debug it and do the further work in next commit.
************ Setting up the page 

Then we have added the another parameter of page in the state that will keep the track of our page.
We have also added the total article in the state.
*********** Creating Next and Previous buttons 

We have added two buttons next and prev in news container, we have also given them html signs
Things functions will be disabled :- Prev page -> If page is less than equal to 1, Next Page -> If page is greater than total article/ page size 's Greatest integer
And we have added a two function that fires when we click on there respective buuton, we will add or subract the page accordingly and then update the url and then fetch and parse there data.
We have added the page size and page in url to navigate the page with some fix no of articles.


******************* Lecture 29 ******************

**************** Spinner. js 

* So what we are doing is we have created a spinner using spinner gif. We have assigned a componet for it.
* We are importing the gif from loading.gif
* And then we have set its height and width

********** News Container 

* So what we are doing here is we have created  a state of loading and assigned it true by default. 
* We have assigned it below the heading 
*                          <div className="text-center">
                            {this.state.loading && <Spinner />}
                        </div>

* So the spinner will only execute when its value will be true, by default it is true, then we use setstate method to do it false.
* As soon as the data get parse, we do it false 
* this.setState({
            articles: parseData.articles,
            totalArticles: parseData.totalResults,
            loading: false,

        });
* So we have done the same in next and previous function as well, as we click on it the loading become true and when the data get parse we set it to false.


*               {    !this.state.loading &&      <div className="row">
* We have added this for news item for loop, so that till the state is true the previous page cards dont show and only loading item get show


*********************** Addding Page Size in props 

* We have made page size as a prop and now we are taking its value from app.js




***************** Lecture 31 *****************************

* So here we have changed the cards size, we have removed the default width and thats made the application responsive

* We have changed the image size in card and the no of words limit in a description

*********** Routing

* To do routing first import in app.js

import {
  BrowserRouter,
  Switch,
  Route,
  Link,
  useRouteMatch,
} from "react-router-dom";

* Now here we are gonna envelope everything in the BrowserRouter
BrowserRouter->Routes->Routes (In which the element is present)

<BrowserRouter>

            <Routes>

            <Route path='/Business'  element={ < NewsContainer  key = "Business" mode={this.mode} pageSize={15} category={'business'} />}  />

            <Route path='/Business'  element={ < NewsContainer  key = "Business" mode={this.mode} pageSize={15} category={'business'} />}  />

            <Routes>

</BrowserRouter>

* Here the path is the same link that will be given to business in the navbar so when we click on these elements on navbar, this route will be called

* Here we are giving the key, so that the compiler would know its a differnt news componet hence it render it again when we click on it.

* Import link in Nvabar.js
import {
  Link,
  
} from "react-router-dom";


* And replace every anchor tag <a> with <Link> and every href= with "to=" in whole page, to use the router

*  <li className="nav-item">
         <Link className="nav-link" to="/Business">Business</Link>
   </li>

* Change the link to the path that u wanna fire whenever we click on it.



******************* Lecture 32 *******************

********** App. js

We have removed the dark and light mode as it seems to be of no use here. We will add it in last if require
********* NavBar.js

We have made the navbar and the buttons in dark mode.

We are using NavLink component from react Router dom, It make the link active when it maatches the current url is when we click on anything in navbar it will becomme active
  <NavLink className="nav-link" to="/Technology">Technology</NavLink>

********* NewsContainer.js

We are fetching author and Published At from news api
Then we are passing them as a props in news items.

We have made the next and previous button darker
********* NewsItems.js

Destructuring author and date

We have fixed the card by assigning the required amount of style to title, desc, date auth and read more paragraph

We have made the cards responsive

{new Date(date).toGMTString().slice(0, 11)}
Using the js date object and its method to get the date in gmt format and then we have sliced the date so that we can get the required amount of date
